@model IEnumerable<IntegralInvesting.Models.PortfolioAssetViewModel>

@{
    int CalculateNumberOfShares(string symbol)
    {
        var portfolioAsset = Model.SingleOrDefault(m => m.Symbol == symbol);

        if (portfolioAsset == null)
            return 0;

        return portfolioAsset.PortfolioStocks.Sum(ps => ps.PurchaseQuantity);
    }
}

@{ ViewData["Title"] = "Portfolio Page"; }

<!-- Sell Shares Modal placeholder -->
<div id="sell-modal-placeholder" class="modal fade">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div id='modal-sell-content'></div>
        </div>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Symbol)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CurrentPrice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NumberOfShares)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
    @{
        foreach (var stock in Model)
        {
                    <tr>
                        <td>
                            @stock.Name
                        </td>
                        <td>
                            @stock.Symbol
                        </td>
                        <td>
                            @stock.CurrentPrice
                        </td>
                        <td>
                            @CalculateNumberOfShares(stock.Symbol)
                        </td>
                        <td>
                            <!-- Sell button -->
                                <a class="btn btn-success" data-modal="" id="btnOpenSellModal" onclick="OpenSellSharesModal('@stock.Symbol', '@stock.CurrentPrice', '@CalculateNumberOfShares(stock.Symbol)')">
                                Sell Shares
                            </a>
                        </td>
                    </tr>
        }
    }
    </tbody>
</table>
<div class="container">
    <div class="row">
        <div class="col-6">
            <div id="mychart" style="width: 100%; height: 85%"></div>
        </div>
        <div class="d-flex col-6">
            <div class="overflow-auto" style="height: 400px">
                @foreach (var item in Model)
                {
                    <div class="card m-2">
                        <div class="row g-0">
                            <div class="col-md-4">
                                <img src="https://mdbcdn.b-cdn.net/img/Photos/Vertical/mountain1.webp" class="img-fluid rounded-start" />
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title">Card title</h5>
                                    <p class="card-text">
                                        This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.
                                    </p>
                                    <p class="card-text">
                                        <small class="text-muted">Last updated 3 mins ago</small>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://www.gstatic.com/charts/loader.js"></script>
    <script>
        var dayOneTotal = 0, dayTwoTotal = 0, dayThreeTotal = 0, dayFourTotal = 0, dayFiveTotal = 0, daySixTotal = 0, daySevenTotal = 0;
        var dayOneDate = '', dayTwoDate = '', dayThreeDate = '', dayFourDate = '', dayFiveDate = '', daySixDate = '', daySevenDate = '';

        function getDailyTotals() {
            @foreach (var asset in Model)
            {
                @:dayOneTotal += (@asset.LastSevenDaysData.ElementAt(0).Close * @asset.NumberOfShares);
                @:dayTwoTotal += (@asset.LastSevenDaysData.ElementAt(1).Close * @asset.NumberOfShares);
                @:dayThreeTotal += (@asset.LastSevenDaysData.ElementAt(2).Close * @asset.NumberOfShares);
                @:dayFourTotal += (@asset.LastSevenDaysData.ElementAt(3).Close * @asset.NumberOfShares);
                @:dayFiveTotal += (@asset.LastSevenDaysData.ElementAt(4).Close * @asset.NumberOfShares);
                @:daySixTotal += (@asset.LastSevenDaysData.ElementAt(5).Close * @asset.NumberOfShares);
                @:daySevenTotal += (@asset.LastSevenDaysData.ElementAt(6).Close * @asset.NumberOfShares);
            }
        }

        function getDailyDates() {
            @{
                var firstAsset = Model.First();
                // var dayOne = firstAsset.LastSevenDaysData.ElementAt(0).Timestamp;
                // var dayTwo = firstAsset.LastSevenDaysData.ElementAt(0).Timestamp;
                // var dayThree = firstAsset.LastSevenDaysData.ElementAt(2).Timestamp;
                // var dayFour = firstAsset.LastSevenDaysData.ElementAt(3).Timestamp;
                // var dayFive = firstAsset.LastSevenDaysData.ElementAt(4).Timestamp;
                // var daySix = firstAsset.LastSevenDaysData.ElementAt(5).Timestamp;
                // var daySeven = firstAsset.LastSevenDaysData.ElementAt(6).Timestamp;

                @:dayOneDate = '@firstAsset.LastSevenDaysData.ElementAt(0).Timestamp.ToShortDateString().Replace("/2024","")';
                @:dayTwoDate = '@firstAsset.LastSevenDaysData.ElementAt(1).Timestamp.ToShortDateString().Replace("/2024", "")';
                @:dayThreeDate = '@firstAsset.LastSevenDaysData.ElementAt(2).Timestamp.ToShortDateString().Replace("/2024", "")';
                @:dayFourDate = '@firstAsset.LastSevenDaysData.ElementAt(3).Timestamp.ToShortDateString().Replace("/2024", "")';
                @:dayFiveDate = '@firstAsset.LastSevenDaysData.ElementAt(4).Timestamp.ToShortDateString().Replace("/2024", "")';
                @:daySixDate = '@firstAsset.LastSevenDaysData.ElementAt(5).Timestamp.ToShortDateString().Replace("/2024", "")';
                @:daySevenDate = '@firstAsset.LastSevenDaysData.ElementAt(6).Timestamp.ToShortDateString().Replace("/2024", "")';
            }
        }

        google.charts.load('current', { packages: ['corechart'] });
        google.charts.setOnLoadCallback(drawChart);

        function drawChart() {
            //debugger;
            getDailyTotals();
            getDailyDates();

            var data = google.visualization.arrayToDataTable([
                ['Day', 'Amount'],
                [dayOneDate, dayOneTotal],
                [dayTwoDate, dayTwoTotal],
                [dayThreeDate, dayThreeTotal],
                [dayFourDate, dayFourTotal],
                [dayFiveDate, dayFiveTotal],
                [daySixDate, daySixTotal],
                [daySevenDate, daySevenTotal]
            ]);

            var options = {
                title: 'Company Performance',
                curveType: 'function',
                legend: { position: 'bottom' }
            };
            var chart = new google.visualization.LineChart(document.getElementById('mychart'));
            chart.draw(data, options);
        }
    </script>
}
