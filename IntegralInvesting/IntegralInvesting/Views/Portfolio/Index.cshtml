@model IEnumerable<IntegralInvesting.Models.PortfolioAssetViewModel>

@{
    int CalculateNumberOfShares(string symbol)
    {
        var portfolioAsset = Model.SingleOrDefault(m => m.Symbol == symbol);

        if (portfolioAsset == null)
            return 0;

        return portfolioAsset.PortfolioStocks.Sum(ps => ps.PurchaseQuantity);
    }
}

@{ ViewData["Title"] = "Portfolio Page"; }

<!-- Sell Shares Modal placeholder -->
<div id="sell-modal-placeholder" class="modal fade">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div id='modal-sell-content'></div>
        </div>
    </div>
</div>

<h2 style="padding-left: 2em;">Portfolio Amount: <span id="portfolioAmountField"></span></h2>

<div class="container">
    <div class="row">
        <div class="col-6">
            <div id="mychart" style="width: 100%; height: 100%"></div>
        </div>
        <div class="d-flex col-6">
            <div class="overflow-auto" style="height: 30em;">
                @foreach (var asset in Model)
                {
                    <div class="card m-2">
                        <div class="row g-0">
                            <div class="col-md-4 text-center" style="display: flex; justify-content: center; align-items: center;">
                                <h2 class="align-middle">@asset.Symbol</h2>
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h4 class="card-title">@asset.Name</h4>
                                    <p class="card-text" style="margin-top: 1.5em;">
                                        <span style="font-weight: bold;">Current Price: </span>@asset.CurrentPrice
                                        <br />
                                        <span style="font-weight: bold;">Number of Shares: </span>@asset.NumberOfShares
                                    </p>
                                </div>
                                <div class="card-body" style="padding-top: 0;">
                                    <!-- Sell button -->
                                    <a class="btn btn-success" data-modal="" id="btnOpenSellModal" onclick="OpenSellSharesModal('@asset.Symbol', '@asset.CurrentPrice', '@CalculateNumberOfShares(asset.Symbol)')">
                                        Sell Shares
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://www.gstatic.com/charts/loader.js"></script>
    <script>
        // Declare variables for storing daily data for each stock asset
        var dayOneTotal = 0, dayTwoTotal = 0, dayThreeTotal = 0, dayFourTotal = 0, dayFiveTotal = 0, daySixTotal = 0, daySevenTotal = 0;
        var dayOneDate = '', dayTwoDate = '', dayThreeDate = '', dayFourDate = '', dayFiveDate = '', daySixDate = '', daySevenDate = '';

        // Methods to create chart
        google.charts.load('current', { packages: ['corechart'] });
        google.charts.setOnLoadCallback(drawChart);

        getPortfolioAmount();

        function drawChart() {
            getDailyTotals();
            getDailyDates();

            var data = google.visualization.arrayToDataTable([
                ['Day', 'Amount'],
                [dayOneDate, dayOneTotal],
                [dayTwoDate, dayTwoTotal],
                [dayThreeDate, dayThreeTotal],
                [dayFourDate, dayFourTotal],
                [dayFiveDate, dayFiveTotal],
                [daySixDate, daySixTotal],
                [daySevenDate, daySevenTotal]
            ]);

            var options = {
                title: 'Last 7 Days Performance',
                curveType: 'function',
                legend: 'none',
                vAxis: { format: 'currency', title: 'Amount' },
                hAxis: { title: 'Date', },
                lineWidth: 4,
                colors: ['#11A65B'],
                chartArea: { width: '70%', height: '80%' }
            };
            var chart = new google.visualization.LineChart(document.getElementById('mychart'));
            chart.draw(data, options);
        }

        function getDailyTotals() {
            @foreach (var asset in Model)
            {
                @:dayOneTotal += (@asset.LastSevenDaysData.ElementAt(0).Close * @asset.NumberOfShares);
                @:dayTwoTotal += (@asset.LastSevenDaysData.ElementAt(1).Close * @asset.NumberOfShares);
                @:dayThreeTotal += (@asset.LastSevenDaysData.ElementAt(2).Close * @asset.NumberOfShares);
                @:dayFourTotal += (@asset.LastSevenDaysData.ElementAt(3).Close * @asset.NumberOfShares);
                @:dayFiveTotal += (@asset.LastSevenDaysData.ElementAt(4).Close * @asset.NumberOfShares);
                @:daySixTotal += (@asset.LastSevenDaysData.ElementAt(5).Close * @asset.NumberOfShares);
                @:daySevenTotal += (@asset.LastSevenDaysData.ElementAt(6).Close * @asset.NumberOfShares);
            }
        }

        function getDailyDates() {
            @{
                var firstAsset = Model.First();

                @:dayOneDate = '@firstAsset.LastSevenDaysData.ElementAt(0).Timestamp.ToShortDateString().Replace("/2024", "")';
                @:dayTwoDate = '@firstAsset.LastSevenDaysData.ElementAt(1).Timestamp.ToShortDateString().Replace("/2024", "")';
                @:dayThreeDate = '@firstAsset.LastSevenDaysData.ElementAt(2).Timestamp.ToShortDateString().Replace("/2024", "")';
                @:dayFourDate = '@firstAsset.LastSevenDaysData.ElementAt(3).Timestamp.ToShortDateString().Replace("/2024", "")';
                @:dayFiveDate = '@firstAsset.LastSevenDaysData.ElementAt(4).Timestamp.ToShortDateString().Replace("/2024", "")';
                @:daySixDate = '@firstAsset.LastSevenDaysData.ElementAt(5).Timestamp.ToShortDateString().Replace("/2024", "")';
                @:daySevenDate = '@firstAsset.LastSevenDaysData.ElementAt(6).Timestamp.ToShortDateString().Replace("/2024", "")';
            }
        }

        function getPortfolioAmount() {
            @{
                decimal portfolioAmount = 0m;

                foreach(var asset in Model)
                {
                    var assetAmount = asset.CurrentPrice * asset.NumberOfShares;
                    portfolioAmount += assetAmount;
                }

                portfolioAmount = Math.Round(portfolioAmount, 2);
             }

             $('#portfolioAmountField').text(String(@portfolioAmount));
        }
    </script>
}
